package com.jk.service;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.UUID;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.jk.dto.OrderResponse;
import com.jk.dto.PurchaseDTO;
import com.jk.entity.Address;
import com.jk.entity.Customer;
import com.jk.entity.Order;
import com.jk.repositry.AddressRepository;
import com.jk.repositry.CustomerRepositry;
import com.jk.repositry.OrderRepository;
import com.razorpay.RazorpayClient;
import com.razorpay.RazorpayException;

@Service
public class OrderService {
	
	@Autowired
	private OrderRepository orderRepository;

	@Autowired
	private AddressRepository addressRepo;
	
	@Autowired
	private CustomerRepositry customerRepositry;
	
	private RazorpayClient client;

	@Value("${razorpay.key.id}")
	private String keyId;

	@Value("${razorpay.key.secret}")
	private String keySecret;

	
	public OrderResponse createOrder(PurchaseDTO purchaseDTO) throws RazorpayException {
		// Order Creation for razorpay
		JSONObject orderRequest = new JSONObject();
		orderRequest.put("amount", purchaseDTO.getOrder().getTotalPrice() *100);
		orderRequest.put("currency", "INR");
		orderRequest.put("receipt", purchaseDTO.getCustomer().getEmail());
		
		// initiate the razorpay client
		this.client = new RazorpayClient(keyId, keySecret);
		com.razorpay.Order razorPayOrder = client.Orders.create(orderRequest);
		Customer customer = customerRepositry.findByEmail(purchaseDTO.getCustomer().getEmail());
		if (customer == null) {
			ObjectMapper obj = new ObjectMapper();
			customer = obj.convertValue(purchaseDTO.getCustomer(), Customer.class);
			customerRepositry.save(customer);
		}
		Address address = new Address();
		address.setCustomer(customer);
		address.setStreet(purchaseDTO.getAddress().getStreet());
        address.setCity(purchaseDTO.getAddress().getCity());
        address.setState(purchaseDTO.getAddress().getState());
        address.setZipCode(purchaseDTO.getAddress().getZipCode());
        addressRepo.save(address);
        
        Order order = new Order();
        String orderTrackingNumber = generateOrderTrackingId();
        order.setOrderTrackingNum(orderTrackingNumber);
        order.setRazorPayOrderId(razorPayOrder.get("id"));
        order.setOrderStatus(razorPayOrder.get("status"));
        order.setTotalPrice(purchaseDTO.getOrder().getTotalPrice());
        order.setQuantity(purchaseDTO.getOrder().getQuantity());
        order.setEmail(customer.getEmail());
        order.setCustomer(customer);
        order.setAddress(address);
        orderRepository.save(order);
	}
	public String generateOrderTrackingId() {
        // Get the current timestamp
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
        String timestamp = sdf.format(new Date());

        // Generate a random UUID for uniqueness
        String randomUUID = UUID.randomUUID().toString().substring(0, 5).toUpperCase();

        // Combine timestamp and UUID to form the tracking ID
        return "OD_" + timestamp + "_" + randomUUID;
    }

}
